
ATmega32A_FirmWare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000006d5  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002e3  00000000  00000000  00000973  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002d4  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000068  00000000  00000000  00000f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000002b9  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000315  00000000  00000000  0000124d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

int main(void)
{
	
	/* Configure pins as Input */
	GPIO_DirectionSet(GPIOA,ALLRegister,OUTPUT);
  7c:	42 e0       	ldi	r20, 0x02	; 2
  7e:	68 e0       	ldi	r22, 0x08	; 8
  80:	89 e3       	ldi	r24, 0x39	; 57
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_DirectionSet>

	uint8_t i =0;
    while(1)
    {		
		for (i=0;i<8;i++)
  88:	c0 e0       	ldi	r28, 0x00	; 0
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	12 c0       	rjmp	.+36     	; 0xb2 <main+0x36>
		{
			GPIO_OutputHandle(GPIOA,i,HIGH);
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	6c 2f       	mov	r22, r28
  92:	89 e3       	ldi	r24, 0x39	; 57
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 bd 00 	call	0x17a	; 0x17a <GPIO_OutputHandle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	84 e3       	ldi	r24, 0x34	; 52
  9e:	9c e0       	ldi	r25, 0x0C	; 12
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x24>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2e>
  aa:	00 00       	nop
	GPIO_DirectionSet(GPIOA,ALLRegister,OUTPUT);

	uint8_t i =0;
    while(1)
    {		
		for (i=0;i<8;i++)
  ac:	cf 5f       	subi	r28, 0xFF	; 255
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <main+0x36>
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	c8 30       	cpi	r28, 0x08	; 8
  b4:	60 f3       	brcs	.-40     	; 0x8e <main+0x12>
  b6:	cd 2f       	mov	r28, r29
			GPIO_OutputHandle(GPIOA,i,HIGH);
			_delay_ms(250);
		}
		for (i=8;i>1;i--)
		{
			GPIO_OutputHandle(GPIOA,i,LOW);
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	6c 2f       	mov	r22, r28
  bc:	89 e3       	ldi	r24, 0x39	; 57
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 bd 00 	call	0x17a	; 0x17a <GPIO_OutputHandle>
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	84 e3       	ldi	r24, 0x34	; 52
  c8:	9c e0       	ldi	r25, 0x0C	; 12
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x4e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x58>
  d4:	00 00       	nop
		for (i=0;i<8;i++)
		{
			GPIO_OutputHandle(GPIOA,i,HIGH);
			_delay_ms(250);
		}
		for (i=8;i>1;i--)
  d6:	c1 50       	subi	r28, 0x01	; 1
  d8:	c1 30       	cpi	r28, 0x01	; 1
  da:	71 f7       	brne	.-36     	; 0xb8 <main+0x3c>
  dc:	e9 cf       	rjmp	.-46     	; 0xb0 <main+0x34>

000000de <GPIO_DirectionSet>:

void GPIO_DirectionSet(
						volatile gio* Current_Gpio,
						PINS pin_number,
						IO_Modes  Mode)
{
  de:	fc 01       	movw	r30, r24
		switch (Mode)
  e0:	41 30       	cpi	r20, 0x01	; 1
  e2:	d9 f0       	breq	.+54     	; 0x11a <GPIO_DirectionSet+0x3c>
  e4:	18 f0       	brcs	.+6      	; 0xec <GPIO_DirectionSet+0xe>
  e6:	42 30       	cpi	r20, 0x02	; 2
  e8:	81 f1       	breq	.+96     	; 0x14a <GPIO_DirectionSet+0x6c>
  ea:	08 95       	ret
		{
			case INPUT_FLOAT:
				 if (pin_number != ALLRegister)
  ec:	68 30       	cpi	r22, 0x08	; 8
  ee:	91 f0       	breq	.+36     	; 0x114 <GPIO_DirectionSet+0x36>
				 {
					 CLEARBIT(Current_Gpio->DDR.Data,pin_number);
  f0:	21 81       	ldd	r18, Z+1	; 0x01
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	ac 01       	movw	r20, r24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <GPIO_DirectionSet+0x20>
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <GPIO_DirectionSet+0x1c>
 102:	ba 01       	movw	r22, r20
 104:	60 95       	com	r22
 106:	86 2f       	mov	r24, r22
 108:	82 23       	and	r24, r18
 10a:	81 83       	std	Z+1, r24	; 0x01
					 CLEARBIT(Current_Gpio->Port.Data,pin_number);
 10c:	82 81       	ldd	r24, Z+2	; 0x02
 10e:	68 23       	and	r22, r24
 110:	62 83       	std	Z+2, r22	; 0x02
 112:	08 95       	ret
				 }
				 else
				 {
					 Current_Gpio->DDR.Data=0;
 114:	11 82       	std	Z+1, r1	; 0x01
					 Current_Gpio->Port.Data=0;
 116:	12 82       	std	Z+2, r1	; 0x02
 118:	08 95       	ret
				 }
			break;
			case INPUT_PULLUP:
				  if (pin_number != ALLRegister)
 11a:	68 30       	cpi	r22, 0x08	; 8
 11c:	91 f0       	breq	.+36     	; 0x142 <GPIO_DirectionSet+0x64>
				  {
					  CLEARBIT(Current_Gpio->DDR.Data,pin_number);
 11e:	21 81       	ldd	r18, Z+1	; 0x01
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	ac 01       	movw	r20, r24
 126:	02 c0       	rjmp	.+4      	; 0x12c <GPIO_DirectionSet+0x4e>
 128:	44 0f       	add	r20, r20
 12a:	55 1f       	adc	r21, r21
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <GPIO_DirectionSet+0x4a>
 130:	ba 01       	movw	r22, r20
 132:	84 2f       	mov	r24, r20
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	81 83       	std	Z+1, r24	; 0x01
					  SETBIT(Current_Gpio->Port.Data,pin_number);
 13a:	82 81       	ldd	r24, Z+2	; 0x02
 13c:	68 2b       	or	r22, r24
 13e:	62 83       	std	Z+2, r22	; 0x02
 140:	08 95       	ret
				  }
				  else
				  {
					  Current_Gpio->DDR.Data=0;
 142:	11 82       	std	Z+1, r1	; 0x01
					  Current_Gpio->Port.Data=0xff;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	82 83       	std	Z+2, r24	; 0x02
 148:	08 95       	ret
				  }
			break;
			case OUTPUT:
				  if (pin_number != ALLRegister)
 14a:	68 30       	cpi	r22, 0x08	; 8
 14c:	91 f0       	breq	.+36     	; 0x172 <GPIO_DirectionSet+0x94>
				  {
					  SETBIT(Current_Gpio->DDR.Data,pin_number);
 14e:	21 81       	ldd	r18, Z+1	; 0x01
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <GPIO_DirectionSet+0x7e>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <GPIO_DirectionSet+0x7a>
 160:	ba 01       	movw	r22, r20
 162:	82 2f       	mov	r24, r18
 164:	84 2b       	or	r24, r20
 166:	81 83       	std	Z+1, r24	; 0x01
					  CLEARBIT(Current_Gpio->Port.Data,pin_number);
 168:	82 81       	ldd	r24, Z+2	; 0x02
 16a:	60 95       	com	r22
 16c:	68 23       	and	r22, r24
 16e:	62 83       	std	Z+2, r22	; 0x02
 170:	08 95       	ret
				  }
				  else
				  {
					  Current_Gpio->DDR.Data=0xff;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	81 83       	std	Z+1, r24	; 0x01
					  Current_Gpio->Port.Data=0;
 176:	12 82       	std	Z+2, r1	; 0x02
 178:	08 95       	ret

0000017a <GPIO_OutputHandle>:
void GPIO_OutputHandle(
						volatile gio* Current_Gpio,
						PINS pin_number,
						DigitalValues Value)
{
	 if (pin_number != ALLRegister)
 17a:	68 30       	cpi	r22, 0x08	; 8
 17c:	09 f1       	breq	.+66     	; 0x1c0 <GPIO_OutputHandle+0x46>
	 {
		if ( Value == HIGH)
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	79 f4       	brne	.+30     	; 0x1a0 <GPIO_OutputHandle+0x26>
		{
			SETBIT(Current_Gpio->Port.Data,pin_number);
 182:	fc 01       	movw	r30, r24
 184:	42 81       	ldd	r20, Z+2	; 0x02
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	f9 01       	movw	r30, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <GPIO_OutputHandle+0x18>
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <GPIO_OutputHandle+0x14>
 196:	bf 01       	movw	r22, r30
 198:	64 2b       	or	r22, r20
 19a:	fc 01       	movw	r30, r24
 19c:	62 83       	std	Z+2, r22	; 0x02
 19e:	08 95       	ret
		}
		else
		{
			CLEARBIT(Current_Gpio->Port.Data,pin_number);
 1a0:	fc 01       	movw	r30, r24
 1a2:	42 81       	ldd	r20, Z+2	; 0x02
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	f9 01       	movw	r30, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <GPIO_OutputHandle+0x36>
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <GPIO_OutputHandle+0x32>
 1b4:	bf 01       	movw	r22, r30
 1b6:	60 95       	com	r22
 1b8:	64 23       	and	r22, r20
 1ba:	fc 01       	movw	r30, r24
 1bc:	62 83       	std	Z+2, r22	; 0x02
 1be:	08 95       	ret
		}
	 }
	 else
	 {
		 Current_Gpio->Port.Data = Value;
 1c0:	fc 01       	movw	r30, r24
 1c2:	42 83       	std	Z+2, r20	; 0x02
 1c4:	08 95       	ret

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
